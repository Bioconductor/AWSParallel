---
title: "AWSParallel Tutorial"
author: "Nitesh Turaga"
date: "`r Sys.Date()`"
output: BiocStyle::html_document
vignette: >
  %\VignetteIndexEntry{Vignette Title}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

# Introduction

The AWSParallel package provides functionality to perform parallel evaluation using AWS infrastructure, specifically EC2. It extends the `SnowParam` class in BiocParallel, and works with Bioconductor objects.

The main idea behind the AWSParallel package is allow the user to create a cluster of EC2 machines on AWS, and run `bplapply` from one "master" node(EC2 machine) to send a task to "worker" machines.

This package requires that the user have an Amazon AWS account, which costs *money*, and requires a credit card to access. 

# Quick Start

The quick start guide assumes you have your AWS access key, and secret key in `~/.aws/credentials`. Please refer to the detailed guide if not.

```{r, eval=FALSE}
library(AWSParallel)
workers = 2

## bioc-release 3.6
image <-  "ami-7d342906"

## 
awsSshKeyPair = getOption("aws_ssh_key_pair")

aws <- AWSSnowParam(
    workers=workers,
    awsInstanceType="t2.micro",
    awsAmiId= image,
    awsSshKeyPair = awsSshKeyPair,
    bplib="/home/ubuntu/R/x86_64-pc-linux-gnu-library/3.4/BiocParallel"
)

## Start instance
bpstart(aws)

## start an AWSParam job
bplapply(1:4, function(i) system("hostname", intern=TRUE), BPPARAM=aws)

## Stop aws instance
bpstop(aws) 
```


# AWS settings

## Get AWS Credntials

To use AWSParallel, AWS credentials are a requirement. The credentials are given through AWS Identity and Access management (IAM)[]. The user needs an access key and secret key.


[IAM]:http://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys


These AWS credntials should be stored on your machine accessible at `~/.aws/credentials`, as given in the AWS documentation [here](http://docs.aws.amazon.com/cli/latest/userguide/cli-config-files.html).

Example AWS credentials, which need to be in the file, "~/.aws/credentials"

```
[default]
aws_access_key_id=AKIAIOSFODNN7EXAMPLE
aws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
```

## AWS Key Pair


## VPC (Optional)


## Security Group settings (Optional)


![Security Group Inbound Rules](inbound_rules.png)

![Security Group Outbound Rules](outbound_rules.png)


Once you have the following AWS components set up, you are ready to use the package

# Working with the package AWSParallel

We need to launch the Bioconductor AMI for the *release* version.

```{r, eval=FALSE}

## Load the package
library(AWSParallel)

## bioc-release 3.6 as found in https://www.bioconductor.org/config.yaml
image <-  "ami-7d342906"

## Number of workers to be started in the AWS cluster
workers = 2

## Set the AWS SSH key pair for your machine, or
## If you already have a keypair, just set the path_to_key, to the pem file.
path_to_key = "~/aws-parallel.pem"

TODO: This can also be automated
awsSshKeyPair = aws.ec2::create_keypair("AWSParallelKeyPair", path_to_key)

## 
sg <- "sg-748dcd07"
subnet <- "subnet-d66a05ec"

## Create AWS instance
aws <- AWSSnowParam(
    workers=workers,
    awsInstanceType="t2.micro",
    awsSubnet = subnet,
    awsSecurityGroup = sg,
    awsAmiId= image,
    awsSshKeyPair = path_to_key,
    bplib="/home/ubuntu/R/x86_64-pc-linux-gnu-library/3.4/BiocParallel",
    awsCredentialsPath="/home/ubuntu/credentials"
    )

aws
## Check if instance is up,
awsInstanceStatus(aws)

## Start instance
bpstart(aws)

## Return cluster which was started
awsCluster()

## Check is instance is up
awsInstanceStatus(aws)

## start an AWSParam job
bplapply(1:4, function(i) system("hostname", intern=TRUE), BPPARAM=aws)

## Stop aws instance
bpstop(aws)
```

# Choosing AWS EC2 Instance Size


# Steps

1. Create a new amazon EC2 instance which is going to be the *master* node, by choosing the AMI-ID from this page, http://bioconductor.org/help/bioconductor-cloud-ami/#ami_ids. Follow the steps in the ec2 management console to launch the image.
An instance with the size of `t2.micro` is also accepatble for the *master* node.

1. SSH into the instance, which will be 

# Session Info

```{r}
sessionInfo()
```
